---
- name: gather operating system variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution_file_variety | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
    - "{{ ansible_os_family | lower }}.yml"

- name: create system group
  group:
    name: "{{ msteams_system_group }}"
    system: true
    state: present
  when: msteams_system_group != "root"
  become: true
  tags: msteams

- name: create system user
  user:
    name: "{{ msteams_system_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ msteams_system_group }}"
    createhome: false
  when: msteams_system_user != "root"
  become: true
  tags: msteams

- name: create configuration and data directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ msteams_system_user }}"
    group: "{{ msteams_system_group }}"
    mode: 0755
  with_items:
    - "{{ msteams_config_dir }}"
    - "{{ msteams_template_dir }}"
  become: true
  tags: msteams

- name: check if msteams is installed
  stat:
    path: "{{ msteams_binary_install_dir }}/msteams"
  register: __msteams_is_installed
  become: true
  tags: msteams

- name: gather currently installed msteams version
  command: "{{ msteams_binary_install_dir }}/msteams -version"
  args:
    warn: false
  changed_when: false
  register: __msteams_current_version_output
  when: __msteams_is_installed.stat.exists
  become: true
  tags: msteams

- name: download binary to bin folder
  get_url:
    url: "https://github.com/prometheus-msteams/prometheus-msteams/releases/download/v{{ msteams_version }}/prometheus-msteams-linux-{{ go_arch }}"
    dest: "/tmp/msteams-{{ msteams_version }}.linux-{{ go_arch }}"
  environment: "{{proxy_env}}"
  register: _download_binary
  until: _download_binary is succeeded
  retries: 5
  delay: 2
  check_mode: false
  become: true
  tags: msteams
  when: (not __msteams_is_installed.stat.exists) or (__msteams_current_version_output.stdout != msteams_version)

- name: propagate binaries
  copy:
    src: "/tmp/msteams-{{ msteams_version }}.linux-{{ go_arch }}"
    dest: "{{ msteams_binary_install_dir }}/msteams"
    mode: 0755
    owner: root
    group: root
  notify: restart msteams
  become: true
  tags: prometheus
  when: (not __msteams_is_installed.stat.exists) or (__msteams_current_version_output.stdout != msteams_version)

- name: configure msteams
  template:
    src: "msteams.config.yml.j2"
    dest: "{{ msteams_config_dir }}/{{ msteams_config_file }}"
    owner: "{{ msteams_system_user }}"
    group: "{{ msteams_system_group }}"
    mode: 0644
  notify: restart msteams
  become: true
  tags: msteams

- name: configure msteams templates
  copy:
    src: "{{ item }}.tmpl"
    dest: "{{ msteams_template_dir }}/{{ item }}.tmpl"
    owner: "{{ msteams_system_user }}"
    group: "{{ msteams_system_group }}"
    mode: 0644
  with_items: "{{ msteams_config_templates }}"
  notify: restart msteams
  become: true
  tags: msteams

- name: create systemd service unit
  template:
    src: msteams.service.j2
    dest: /etc/systemd/system/msteams.service
    owner: root
    group: root
    mode: 0644
  notify: restart msteams
  become: true
  tags: msteams

- name: enable capabilities to ports lower than port 1024
  capabilities:
    path: "{{ msteams_binary_install_dir }}/msteams"
    capability: CAP_NET_BIND_SERVICE+ep
    state: present
  when: msteams_web_listen_port <= 1024
  tags: msteams

- name: allow binding to port in selinux
  seport:
    ports: "{{ msteams_web_listen_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_version.full is version_compare('2.4', '>=')
    - ansible_selinux.status == "enabled"
  become: true
  tags: msteams

- name: check whether ufw status is active
  command: "ufw status"
  changed_when: False
  ignore_errors: True
  register: _ufw_status
  become: true
  when:
    - msteams_allow_firewall
    - ansible_os_family == 'Debian'
  tags: msteams

- name: check whether firewalld status is active
  command: "firewall-cmd --state"
  changed_when: False
  ignore_errors: True
  register: _firewalld_status
  become: true
  when: ansible_os_family == 'RedHat'
  tags: msteams

- name: configure ufw
  community.general.ufw:
    rule: allow
    port: "{{ msteams_web_listen_port }}"
    proto: tcp
    state: enabled
    comment: "Alertmanager msteams"
  changed_when: False
  ignore_errors: True
  notify: reload ufw
  become: true
  tags: msteams
  when:
    - "'active' in _ufw_status.stdout"
    - ansible_os_family == 'Debian'
    - msteams_allow_firewall

- name: configure firewalld
  firewalld:
    port: "{{ msteams_web_listen_port }}/tcp"
    permanent: yes
    state: true
  changed_when: False
  ignore_errors: True
  when:
    - "'running' in _firewalld_status.stdout"
    - msteams_allow_firewall
    - ansible_os_family == 'RedHat'
  notify: reload firewalld
  become: true
  tags: msteams

- name: ensure msteams service is started and enabled
  systemd:
    daemon_reload: true
    name: msteams
    state: restarted
    enabled: true
  become: true
  tags: msteams
